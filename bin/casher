#!/usr/bin/env ruby
require 'shellwords'
require 'fileutils'
require 'yaml'

class Casher
  include FileUtils

  def initialize
    @casher_dir = ENV['CASHER_DIR'] || File.expand_path(".casher", ENV["HOME"])
    @mtime_file = File.expand_path('mtime.yml', @casher_dir)
    @fetch_tar  = File.expand_path('fetch.tbz', @casher_dir)
    @push_tar   = File.expand_path('push.tbz', @casher_dir)
    @mtimes     = File.exist?(@mtime_file) ? YAML.load_file(@mtime_file) : {}
    mkdir_p @casher_dir
  end

  def run(command, *arguments)
    raise "unknown command" unless %w[fetch add push].include? command
    time(command) { send(command, *arguments) }
  end

  def time(command)
    start = Time.now
    yield
  ensure
    duration = Time.now - start
    puts "#{command} took #{duration} seconds"
  end

  def fetch(*urls)
    puts "attempting to download cache archive"
    if urls.any? { |url| system "curl --tcp-nodelay %p -o %p -f -s >#{@casher_dir}/fetch.log 2>#{@casher_dir}/fetch.err.log" % [url, @fetch_tar] }
      puts "found cache"
    else
      puts "could not download cache"
      if File.exist? @fetch_tar
        puts File.read(@fetch_tar)
        rm @fetch_tar
      end
    end
  end

  def add(*paths)
    paths.each do |path|
      path = File.expand_path(path)
      puts "adding #{path} to cache"
      mkdir_p path
      tar(:x, @fetch_tar, path) if File.exist? @fetch_tar
      @mtimes[path] = Time.now.to_i
    end
    File.open(@mtime_file, 'w') { |f| f << @mtimes.to_yaml }
  end

  def push(url)
    if changed?
      puts "changes detected, packing new archive"
      tar(:c, @push_tar, *@mtimes.keys)
      puts "uploading archive"
      unless system "curl -T %p %p -s -S  >#{@casher_dir}/push.log 2>#{@casher_dir}/push.err.log" % [@push_tar, url]
        puts "failed to upload cache", File.read("#{@casher_dir}/push.err.log"), File.read("#{@casher_dir}/push.log")
      end
    else
      puts "nothing changed, not updating cache"
    end
  end

  def changed?
    return false if @mtimes.empty?
    return true unless File.exist? @fetch_tar
    @mtimes.any? do |path, mtime|
      Dir.glob("#{path}/**/*").any? do |file|
        next if File.mtime(file).to_i <= mtime
        next if File.directory?(file)
        puts "change detected: #{file}"
        true
      end
    end
  end

  def tar(flag, file, *args)
    command = "tar -Pj#{flag}f #{Shellwords.escape(file)} #{Shellwords.join(args)}"
    unless system "#{command} 2>#{@casher_dir}/tar.err.log >#{@casher_dir}/tar.log"
      puts "FAILED: #{command}", File.read("#{@casher_dir}/tar.err.log"), File.read("#{@casher_dir}/tar.log")
    end
  end
end

Casher.new.run(*ARGV) if $0 == __FILE__
